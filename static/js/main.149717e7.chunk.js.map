{"version":3,"sources":["components/User/User.tsx","components/Comment/Comment.tsx","components/CommentList/CommentList.tsx","components/Post/Post.tsx","components/PostList/PostList.tsx","api/api.ts","store/index.ts","App.tsx","index.tsx"],"names":["User","props","userData","className","name","email","address","city","street","Comment","comment","body","CommentList","comments","map","currentComment","key","id","Post","post","title","user","PostList","posts","currentPost","getPreparedPosts","a","fetch","then","response","json","users","find","userId","filter","postId","initialState","isLoaded","searchValue","filteredPosts","setPosts","type","payload","setFilteredPosts","setSearchValue","value","getPosts","state","getLoadingStatus","getSearchValue","getFilteredPosts","store","createStore","action","App","dispatch","useDispatch","useSelector","handleStart","data","length","disabled","onClick","onChange","event","target","onKeyUp","keyCode","includes","placeholder","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.149717e7.chunk.js","sourcesContent":["import React from 'react';\nimport './User.css';\n\ninterface UserProps {\n  userData: User;\n}\n\nexport const User: React.FC<UserProps> = (props) => {\n  const { userData } = props;\n\n  return (\n    <div className=\"user\">\n      <p className=\"user__name\">{userData.name}</p>\n      <p>{userData.email}</p>\n      <p>{`${userData.address.city} ${userData.address.street}`}</p>\n    </div>\n  );\n};\n","import React from 'react';\n\ninterface Props {\n  comment: Comment;\n}\n\nexport const Comment: React.FC<Props> = (props) => {\n  const { comment } = props;\n\n  return (\n    <li className=\"wrapper__list\">\n      <p className=\"wrapper__list-head\">{comment.name}</p>\n      <p>{comment.email}</p>\n      <p>{comment.body}</p>\n    </li>\n  );\n};\n","import React from 'react';\nimport { Comment } from '../Comment/Comment';\n\ninterface CommentListProps {\n  comments: Comment[];\n}\n\nexport const CommentList: React.FC<CommentListProps> = (props) => {\n  const { comments } = props;\n\n  return (\n    <>\n      {comments.map((currentComment) => (\n        <Comment comment={currentComment} key={currentComment.id} />\n      ))}\n    </>\n  );\n};\n","import React from 'react';\nimport './Post.css';\nimport { User } from '../User/User';\nimport { CommentList } from '../CommentList/CommentList';\n\ninterface PostProps {\n  post: Post;\n}\n\nexport const Post: React.FC<PostProps> = (props) => {\n  const { post } = props;\n\n  return (\n    <div className=\"post\">\n      <h2>{post.title}</h2>\n      <p>{post.body}</p>\n\n      <User userData={post.user} />\n\n      <ul className=\"post__comments\">\n        <CommentList comments={post.comments} />\n      </ul>\n    </div>\n  );\n};\n","import React from 'react';\nimport './PostList.css';\nimport { Post } from '../Post/Post';\n\ninterface Props {\n  posts: Post[];\n}\n\nexport const PostList: React.FC<Props> = (props) => {\n  const { posts } = props;\n\n  return (\n    <ul className=\"posts\">\n      {\n        posts.map((currentPost) => (\n          <li key={currentPost.id}>\n            <Post post={currentPost} />\n          </li>\n        ))\n      }\n    </ul>\n  );\n};\n","const POSTS_URL = 'https://mate-academy.github.io/react_dynamic-list-of-posts/api/posts.json';\nconst USERS_URL = 'https://mate-academy.github.io/react_dynamic-list-of-posts/api/users.json';\nconst COMMENTS_URL = 'https://mate-academy.github.io/react_dynamic-list-of-posts/api/comments.json';\n\nexport const getPreparedPosts = async (): Promise<Post[]> => {\n  const posts = await fetch(POSTS_URL).then(response => response.json());\n  const users = await fetch(USERS_URL).then(response => response.json());\n  const comments = await fetch(COMMENTS_URL).then(response => response.json());\n\n  return posts.map((post: Post) => ({\n    ...post,\n    user: users.find((user: User) => user.id === post.userId),\n    comments: comments.filter((comment: Comment) => comment.postId === post.id),\n  }));\n};\n","import { createStore, AnyAction} from 'redux';\n\ninterface RootState {\n  posts: Post[];\n  isLoaded: boolean;\n  searchValue: string;\n  filteredPosts: Post[];\n}\n\nconst initialState: RootState = {\n  posts: [],\n  isLoaded: false,\n  searchValue: '',\n  filteredPosts: [],\n};\n\nconst SET_POSTS = 'SET_POSTS';\nconst SET_LOADING_STATUS = 'SET_LOAD_STATUS';\nconst SET_FILTERED_POSTS = 'SET_FILTERED_POSTS';\nconst SET_SEARCH_VALUE = 'SET_SEARCH_VALUE';\n\nexport const setPosts = (posts: Post[]) => ({type: SET_POSTS, payload: posts});\nexport const setLoadingStatus = () => ({type: SET_LOADING_STATUS});\nexport const setFilteredPosts = (filteredPosts: Post[]) => ({type: SET_FILTERED_POSTS, payload: filteredPosts});\nexport const setSearchValue = (value: string) => ({type: SET_SEARCH_VALUE, payload: value});\n\nexport const getPosts = (state: RootState) => state.posts;\nexport const getLoadingStatus = (state: RootState) => state.isLoaded;\nexport const getSearchValue = (state: RootState) => state.searchValue;\nexport const getFilteredPosts = (state: RootState) => state.filteredPosts; \n\nconst rootReducer = (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case SET_POSTS:\n      return {\n        ...state,\n        posts: action.payload,\n      };\n    case SET_LOADING_STATUS:\n      return {\n        ...state,\n        isLoaded: true,\n      };\n    case SET_FILTERED_POSTS:\n      return {\n        ...state,\n        filteredPosts: action.payload,\n      };\n    case SET_SEARCH_VALUE:\n      return {\n        ...state,\n        searchValue: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nconst store = createStore(rootReducer);\n\nexport default store;\n","import React from 'react';\nimport './App.css';\nimport { PostList } from './components/PostList/PostList';\nimport { getPreparedPosts } from './api/api';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  setPosts,\n  setLoadingStatus,\n  setFilteredPosts,\n  setSearchValue,\n  getPosts,\n  getLoadingStatus,\n  getSearchValue,\n  getFilteredPosts\n} from './store';\n\nconst App: React.FC = () => {\n  const dispatch = useDispatch();\n  const posts = useSelector(getPosts);\n  const isLoaded = useSelector(getLoadingStatus);\n  const searchValue = useSelector(getSearchValue);\n  const filteredPosts = useSelector(getFilteredPosts);\n\n  const handleStart = async () => {\n    dispatch(setLoadingStatus());\n\n    const data = await getPreparedPosts();\n    \n    dispatch(setPosts(data));\n    dispatch(setFilteredPosts(data));\n  };\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n\n    dispatch(setSearchValue(value));\n  };\n\n  const handleEnter = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.keyCode === 13) {\n      const filter = posts.filter(post => (\n        post.title.includes(searchValue) || post.body.includes(searchValue)));\n\n      dispatch(setFilteredPosts(filter));\n      dispatch(setSearchValue(''));\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Static list of posts</h1>\n\n      <p>\n        <span>posts: </span>\n        {filteredPosts.length}\n      </p>\n\n      { posts.length === 0\n        ? (\n          <button\n            disabled={isLoaded}\n            type=\"button\"\n            onClick={handleStart}\n          >\n            {!isLoaded ? 'Load' : 'Loading...'}\n          </button>\n        )\n        : (\n          <>\n            <input\n              type=\"text\"\n              onChange={handleChange}\n              value={searchValue}\n              onKeyUp={handleEnter}\n              placeholder=\"Type word(s) and press Enter\"\n            />\n            <PostList posts={filteredPosts} />\n          </>\n        )}\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport App from './App';\nimport store from './store';\n\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}