{"version":3,"sources":["store/loading.ts","store/message.ts","store/index.ts","components/Start.tsx","helpers/api.ts","App.tsx","index.tsx"],"names":["reducer","loading","action","type","setMessage","message","rootReducer","combineReducers","loadingReducer","messageReducer","isLoading","state","getMessage","store","createStore","composeWithDevTools","applyMiddleware","thunk","Start","dispatch","useDispatch","useSelector","onClick","a","Promise","resolve","setTimeout","disabled","App","className","Root","ReactDOM","render","document","getElementById"],"mappings":"wTAuBeA,EAbC,WAAyC,IAAxCC,EAAuC,wDAAtBC,EAAsB,uCACtD,OAAQA,EAAOC,MACb,IATkB,gBAUhB,OAAO,EAET,IAXmB,iBAYjB,OAAO,EAET,QACE,OAAOF,ICbAG,EAAa,SAACC,GAAD,MAAsB,CAAEF,KAH9B,cAGiDE,YAatDL,EAVC,WAAsC,IAArCK,EAAoC,uDAA1B,GAAIH,EAAsB,uCACnD,OAAQA,EAAOC,MACb,IARgB,cASd,OAAOD,EAAOG,QAEhB,QACE,OAAOA,ICEb,IAAMC,EAAcC,0BAAgB,CAClCN,QAASO,EACTH,QAASI,IAOEC,EAAY,SAACC,GAAD,OAAsBA,EAAMV,SACxCW,EAAa,SAACD,GAAD,OAAsBA,EAAMN,SA6BvCQ,EALDC,sBACZR,EACAS,8BAAoBC,0BAAgBC,OChDzBC,EAAQ,WACnB,IAAMC,EAAWC,cACXnB,EAAUoB,YAAYX,GAE5B,OACE,4BACEP,KAAK,SACLmB,QAAS,kBAAMH,EDwBnB,uCAAO,WAAOA,GAAP,eAAAI,EAAA,6DACLJ,EF9B+B,CAAEhB,KAJf,kBEiCb,kBElCA,IAAIqB,SAAQ,SAAAC,GACjBC,YAAW,WACTD,EAAQ,yBACP,QF+BE,OAIGpB,EAJH,OAMHc,EAASf,EAAWC,IANjB,gDAQHc,EAASf,EAAW,qCARjB,QAWLe,EFvCgC,CAAEhB,KAJf,mBEgCd,yDAAP,mDAAM,KCvBFwB,SAAU1B,GAETA,EAAU,aAAe,SEOjB2B,EAdH,WACV,IAAM3B,EAAUoB,YAAYX,GACtBL,EAAUgB,YAAYT,IAAe,SAE3C,OACE,yBAAKiB,UAAU,OACb,mDACA,4BAAK5B,EAAU,aAAeI,GAE9B,kBAAC,EAAD,QCTAyB,EAAO,kBACX,kBAAC,IAAD,CAAUjB,MAAOA,GACf,kBAAC,IAAD,KACE,kBAAC,EAAD,SAKNkB,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,W","file":"static/js/main.56b76666.chunk.js","sourcesContent":["import { AnyAction } from 'redux';\n\n// Action types\nconst START_LOADING = 'START_LOADING';\nconst FINISH_LOADING = 'FINISH_LOADING';\n\n// Action creators\nexport const startLoading = () => ({ type: START_LOADING });\nexport const finishLoading = () => ({ type: FINISH_LOADING });\n\nconst reducer = (loading = false, action: AnyAction) => {\n  switch (action.type) {\n    case START_LOADING:\n      return true;\n\n    case FINISH_LOADING:\n      return false;\n\n    default:\n      return loading;\n  }\n};\n\nexport default reducer;\n","import { AnyAction } from 'redux';\n\n// Action types\nconst SET_MESSAGE = 'SET_MESSAGE';\n\n// Action creators\nexport const setMessage = (message: string) => ({ type: SET_MESSAGE, message });\n\n// message reducer receives only the `state.message` part, but not the entire Redux state\nconst reducer = (message = '', action: AnyAction) => {\n  switch (action.type) {\n    case SET_MESSAGE:\n      return action.message;\n\n    default:\n      return message;\n  }\n};\n\nexport default reducer;\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport { Dispatch } from 'react';\n\nimport loadingReducer, { finishLoading, startLoading } from './loading';\nimport messageReducer, { setMessage } from './message';\nimport { fetchMessage } from '../helpers/api';\n\n/**\n * Each concrete reducer will receive all the actions but only its part of the state\n *\n * const rootReducer = (state = {}, action) => ({\n *   loading: loadingReducer(state.loading, action),\n *   message: messageReducer(state.message, action),\n * })\n */\nconst rootReducer = combineReducers({\n  loading: loadingReducer,\n  message: messageReducer,\n});\n\n// We automatically get types returned by concrete reducers\nexport type RootState = ReturnType<typeof rootReducer>;\n\n// Selectors - a function receiving Redux state and returning some data from it\nexport const isLoading = (state: RootState) => state.loading;\nexport const getMessage = (state: RootState) => state.message;\n\n/**\n * Thunk - is a function that should be used as a normal action creator\n *\n * dispatch(loadMessage())\n */\nexport const loadMessage = () => {\n  // inner function is an action handled by Redux Thunk\n  return async (dispatch: Dispatch<any>) => {\n    dispatch(startLoading());\n\n    try {\n      const message = await fetchMessage();\n\n      dispatch(setMessage(message));\n    } catch (error) {\n      dispatch(setMessage('Error occurred when loading data'));\n    }\n\n    dispatch(finishLoading());\n  };\n};\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk)),\n);\n\nexport default store;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { isLoading, loadMessage } from '../store';\n\nexport const Start = () => {\n  const dispatch = useDispatch();\n  const loading = useSelector(isLoading);\n\n  return (\n    <button\n      type=\"button\"\n      onClick={() => dispatch(loadMessage())}\n      disabled={loading}\n    >\n      {loading ? 'Loading...' : 'Load'}\n    </button>\n  );\n};\n","export function fetchMessage(): Promise<string> {\n  // this is just a fake promise resolved in 2 seconds\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve('Message from server');\n    }, 2000);\n  });\n}\n","import React from 'react';\nimport { useSelector } from 'react-redux';\n\nimport './App.scss';\nimport { Start } from './components/Start';\n\nimport { isLoading, getMessage } from './store';\n\nconst App = () => {\n  const loading = useSelector(isLoading);\n  const message = useSelector(getMessage) || 'Ready!';\n\n  return (\n    <div className=\"App\">\n      <h1>Redux list of posts</h1>\n      <h2>{loading ? 'Loading...' : message}</h2>\n\n      <Start />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport App from './App';\nimport store from './store';\n\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}